{"ast":null,"code":"var _jsxFileName = \"/Users/minhyunglee/Desktop/CodeStates/agora-states-react/src/Components/Pagination.js\";\nimport { BsArrowLeftSquareFill } from \"react-icons/bs\";\nimport { BsArrowRightSquareFill } from \"react-icons/bs\";\nimport { agoraStatesDiscussions } from \"../data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pagination() {\n  // 페이지네이션\n  const rowsPerPage = 10; // 한 페이지에 들어가는 요소 수\n  const rows = document.querySelectorAll(\"ul li\");\n  const rowsCount = agoraStatesDiscussions.length; // newDiscussions로 수정 필요\n\n  const pageCount = Math.ceil(rowsCount / rowsPerPage);\n  const pageSection = document.querySelector(\".pageItems\");\n  // 화살표 추가\n  const prePageBtn = document.querySelector(\".fa-arrow-left\");\n  const nextPageBtn = document.querySelector(\".fa-arrow-right\");\n  let pageActiveIdx = 0; // 현재 페이지 그룹\n  let currentPageNum = 1; // 현재 보고 있는 페이지네이션 번호\n  let maxPageNum = 5; // 페이지 그룹 내 페이지 최대 개수\n\n  for (let i = 1; i < rowsCount / rowsPerPage + 1; i++) {\n    const pageList = document.createElement(\"li\");\n    const pageLisElem = document.createElement(\"a\");\n    pageLisElem.setAttribute(\"href\", \"#\");\n    pageLisElem.textContent = `${i}`;\n    pageList.append(pageLisElem);\n    pageSection.appendChild(pageList);\n  }\n  const numberBtn = pageSection.querySelectorAll(\"a\");\n  numberBtn.forEach((item, idx) => {\n    item.addEventListener(\"click\", event => {\n      event.preventDefault();\n      for (let num of numberBtn) {\n        num.classList.remove(\"active\");\n      }\n      event.target.classList.add(\"active\");\n      display(idx);\n    });\n  });\n\n  // 페이지 버튼 구현\n  function display(idx) {\n    // idx 0 -> slice(0, 5);   0에서 5까지 요소\n    // idx 1 -> slice(1, 10);   1에서 10까지 요소\n\n    let start = idx * rowsPerPage; // 시작 페이지\n    let end = start + rowsPerPage; // 마지막 페이지\n    let rowsArray = [...rows]; // 유사 배열이므로 배열로 변환\n    console.log(rowsArray);\n    for (let row of rowsArray) {\n      row.style.display = \"none\"; // 처음에 화면에 요소를 모두 안보이게 처리\n    }\n\n    let newRows = rowsArray.slice(start, end);\n    for (let num of newRows) {\n      num.style.display = \"\"; // 새로 만들어준 배열을 보이게 처리\n    }\n  }\n\n  display(0);\n\n  // 페이지 버튼 그룹 구현\n  // 숫자를 받아서 그룹을 보여줌\n  // num = 0 -> slice(0,5)\n  // num = 1 -> slice(0,10)\n  function displayPage(num) {\n    // 페이지 번보 안보이게 처리\n    for (let nu of numberBtn) {\n      nu.style.display = \"none\";\n    }\n    let totalPageCount = Math.ceil(pageCount / maxPageNum);\n    let pageArr = [...numberBtn];\n    let start = num * maxPageNum;\n    console.log(num);\n    console.log(maxPageNum);\n    let end = start + maxPageNum;\n    let pageListArr = pageArr.slice(start, end);\n    for (let item of pageListArr) {\n      item.style.display = \"block\";\n    }\n    if (pageActiveIdx === 0) {\n      prePageBtn.style.display = \"none\";\n    } else {\n      prePageBtn.style.display = \"block\";\n    }\n    if (pageActiveIdx === totalPageCount - 1) {\n      nextPageBtn.style.display = \"none\";\n    } else {\n      nextPageBtn.style.display = \"block\";\n    }\n  }\n  displayPage(0);\n  nextPageBtn.addEventListener(\"click\", () => {\n    let nextPageNum = pageActiveIdx * maxPageNum + maxPageNum;\n    display(nextPageNum);\n    ++pageActiveIdx;\n    displayPage(pageActiveIdx);\n  });\n  prePageBtn.addEventListener(\"click\", () => {\n    let prePageNum = pageActiveIdx * maxPageNum - maxPageNum;\n    display(prePageNum);\n    --pageActiveIdx;\n    displayPage(pageActiveIdx);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pagination\",\n    children: [/*#__PURE__*/_jsxDEV(BsArrowLeftSquareFill, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"pageItems\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BsArrowRightSquareFill, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_c = Pagination;\nvar _c;\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"names":["BsArrowLeftSquareFill","BsArrowRightSquareFill","agoraStatesDiscussions","Pagination","rowsPerPage","rows","document","querySelectorAll","rowsCount","length","pageCount","Math","ceil","pageSection","querySelector","prePageBtn","nextPageBtn","pageActiveIdx","currentPageNum","maxPageNum","i","pageList","createElement","pageLisElem","setAttribute","textContent","append","appendChild","numberBtn","forEach","item","idx","addEventListener","event","preventDefault","num","classList","remove","target","add","display","start","end","rowsArray","console","log","row","style","newRows","slice","displayPage","nu","totalPageCount","pageArr","pageListArr","nextPageNum","prePageNum"],"sources":["/Users/minhyunglee/Desktop/CodeStates/agora-states-react/src/Components/Pagination.js"],"sourcesContent":["import { BsArrowLeftSquareFill } from \"react-icons/bs\";\nimport { BsArrowRightSquareFill } from \"react-icons/bs\";\nimport { agoraStatesDiscussions } from \"../data\";\n\nexport default function Pagination() {\n  // 페이지네이션\n  const rowsPerPage = 10; // 한 페이지에 들어가는 요소 수\n  const rows = document.querySelectorAll(\"ul li\");\n  const rowsCount = agoraStatesDiscussions.length; // newDiscussions로 수정 필요\n\n  const pageCount = Math.ceil(rowsCount / rowsPerPage);\n  const pageSection = document.querySelector(\".pageItems\");\n  // 화살표 추가\n  const prePageBtn = document.querySelector(\".fa-arrow-left\");\n  const nextPageBtn = document.querySelector(\".fa-arrow-right\");\n  let pageActiveIdx = 0; // 현재 페이지 그룹\n  let currentPageNum = 1; // 현재 보고 있는 페이지네이션 번호\n  let maxPageNum = 5; // 페이지 그룹 내 페이지 최대 개수\n\n  for (let i = 1; i < rowsCount / rowsPerPage + 1; i++) {\n    const pageList = document.createElement(\"li\");\n    const pageLisElem = document.createElement(\"a\");\n    pageLisElem.setAttribute(\"href\", \"#\");\n    pageLisElem.textContent = `${i}`;\n    pageList.append(pageLisElem);\n    pageSection.appendChild(pageList);\n  }\n\n  const numberBtn = pageSection.querySelectorAll(\"a\");\n  numberBtn.forEach((item, idx) => {\n    item.addEventListener(\"click\", (event) => {\n      event.preventDefault();\n      for (let num of numberBtn) {\n        num.classList.remove(\"active\");\n      }\n      event.target.classList.add(\"active\");\n      display(idx);\n    });\n  });\n\n  // 페이지 버튼 구현\n  function display(idx) {\n    // idx 0 -> slice(0, 5);   0에서 5까지 요소\n    // idx 1 -> slice(1, 10);   1에서 10까지 요소\n\n    let start = idx * rowsPerPage; // 시작 페이지\n    let end = start + rowsPerPage; // 마지막 페이지\n    let rowsArray = [...rows]; // 유사 배열이므로 배열로 변환\n    console.log(rowsArray);\n    for (let row of rowsArray) {\n      row.style.display = \"none\"; // 처음에 화면에 요소를 모두 안보이게 처리\n    }\n\n    let newRows = rowsArray.slice(start, end);\n    for (let num of newRows) {\n      num.style.display = \"\"; // 새로 만들어준 배열을 보이게 처리\n    }\n  }\n  display(0);\n\n  // 페이지 버튼 그룹 구현\n  // 숫자를 받아서 그룹을 보여줌\n  // num = 0 -> slice(0,5)\n  // num = 1 -> slice(0,10)\n  function displayPage(num) {\n    // 페이지 번보 안보이게 처리\n    for (let nu of numberBtn) {\n      nu.style.display = \"none\";\n    }\n    let totalPageCount = Math.ceil(pageCount / maxPageNum);\n    let pageArr = [...numberBtn];\n    let start = num * maxPageNum;\n    console.log(num);\n    console.log(maxPageNum);\n\n    let end = start + maxPageNum;\n    let pageListArr = pageArr.slice(start, end);\n\n    for (let item of pageListArr) {\n      item.style.display = \"block\";\n    }\n    if (pageActiveIdx === 0) {\n      prePageBtn.style.display = \"none\";\n    } else {\n      prePageBtn.style.display = \"block\";\n    }\n\n    if (pageActiveIdx === totalPageCount - 1) {\n      nextPageBtn.style.display = \"none\";\n    } else {\n      nextPageBtn.style.display = \"block\";\n    }\n  }\n\n  displayPage(0);\n\n  nextPageBtn.addEventListener(\"click\", () => {\n    let nextPageNum = pageActiveIdx * maxPageNum + maxPageNum;\n    display(nextPageNum);\n    ++pageActiveIdx;\n    displayPage(pageActiveIdx);\n  });\n\n  prePageBtn.addEventListener(\"click\", () => {\n    let prePageNum = pageActiveIdx * maxPageNum - maxPageNum;\n    display(prePageNum);\n    --pageActiveIdx;\n    displayPage(pageActiveIdx);\n  });\n\n  return (\n    <div className=\"pagination\">\n      <BsArrowLeftSquareFill></BsArrowLeftSquareFill>\n      <ul className=\"pageItems\"></ul>\n      <BsArrowRightSquareFill></BsArrowRightSquareFill>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}