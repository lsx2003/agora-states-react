{"ast":null,"code":"var _jsxFileName = \"/Users/minhyunglee/Desktop/CodeStates/agora-states-react/src/Components/Pagination.js\";\nimport { BsArrowLeftSquareFill } from \"react-icons/bs\";\nimport { BsArrowRightSquareFill } from \"react-icons/bs\";\nimport { agoraStatesDiscussions } from \"../data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pagination() {\n  //   // 페이지네이션\n  const rowsPerPage = 10; // 한 페이지에 들어가는 요소 수\n  const rows = document.querySelectorAll(\"ul li\");\n  const rowsCount = agoraStatesDiscussions.length; // newDiscussions로 수정 필요\n\n  const pageCount = Math.ceil(rowsCount / rowsPerPage);\n  const pageSection = document.querySelector(\".pageItems\");\n  //   // 화살표 추가\n  const prePageBtn = document.querySelector(\".arrow-left\");\n  const nextPageBtn = document.querySelector(\".arrow-right\");\n  let pageActiveIdx = 0; // 현재 페이지 그룹\n  let currentPageNum = 0; // 현재 보고 있는 페이지네이션 번호\n  let maxPageNum = 5; // 페이지 그룹 내 페이지 최대 개수\n\n  for (let i = 1; i < rowsCount / rowsPerPage + 1; i++) {\n    const pageList = document.createElement(\"li\");\n    const pageLisElem = document.createElement(\"a\");\n    pageLisElem.setAttribute(\"href\", \"#\");\n    pageLisElem.textContent = `${i}`;\n    pageList.append(pageLisElem);\n    pageSection.appendChild(pageList);\n  }\n\n  //   const numberBtn = pageSection.querySelectorAll(\"a\");\n  //   numberBtn.forEach((item, idx) => {\n  //     item.addEventListener(\"click\", (event) => {\n  //       event.preventDefault();\n  //       for (let num of numberBtn) {\n  //         num.classList.remove(\"active\");\n  //       }\n  //       event.target.classList.add(\"active\");\n  //       display(idx);\n  //     });\n  //   });\n\n  //   // 페이지 버튼 구현\n  //   function display(idx) {\n  //     // idx 0 -> slice(0, 5);   0에서 5까지 요소\n  //     // idx 1 -> slice(1, 10);   1에서 10까지 요소\n\n  //     let start = idx * rowsPerPage; // 시작 페이지\n  //     let end = start + rowsPerPage; // 마지막 페이지\n  //     let rowsArray = [...rows]; // 유사 배열이므로 배열로 변환\n  //     console.log(rowsArray);\n  //     for (let row of rowsArray) {\n  //       row.style.display = \"none\"; // 처음에 화면에 요소를 모두 안보이게 처리\n  //     }\n\n  //     let newRows = rowsArray.slice(start, end);\n  //     for (let num of newRows) {\n  //       num.style.display = \"\"; // 새로 만들어준 배열을 보이게 처리\n  //     }\n  //   }\n  //   display(0);\n\n  //   // 페이지 버튼 그룹 구현\n  //   // 숫자를 받아서 그룹을 보여줌\n  //   // num = 0 -> slice(0,5)\n  //   // num = 1 -> slice(0,10)\n  //   function displayPage(num) {\n  //     // 페이지 번보 안보이게 처리\n  //     for (let nu of numberBtn) {\n  //       nu.style.display = \"none\";\n  //     }\n  //     let totalPageCount = Math.ceil(pageCount / maxPageNum);\n  //     let pageArr = [...numberBtn];\n  //     let start = num * maxPageNum;\n  //     console.log(num);\n  //     console.log(maxPageNum);\n\n  //     let end = start + maxPageNum;\n  //     let pageListArr = pageArr.slice(start, end);\n\n  //     for (let item of pageListArr) {\n  //       item.style.display = \"block\";\n  //     }\n  //     if (pageActiveIdx === 0) {\n  //       prePageBtn.style.display = \"none\";\n  //     } else {\n  //       prePageBtn.style.display = \"block\";\n  //     }\n\n  //     if (pageActiveIdx === totalPageCount - 1) {\n  //       nextPageBtn.style.display = \"none\";\n  //     } else {\n  //       nextPageBtn.style.display = \"block\";\n  //     }\n  //   }\n\n  //   displayPage(0);\n\n  //   nextPageBtn.addEventListener(\"click\", () => {\n  //     let nextPageNum = pageActiveIdx * maxPageNum + maxPageNum;\n  //     display(nextPageNum);\n  //     ++pageActiveIdx;\n  //     displayPage(pageActiveIdx);\n  //   });\n\n  //   prePageBtn.addEventListener(\"click\", () => {\n  //     let prePageNum = pageActiveIdx * maxPageNum - maxPageNum;\n  //     display(prePageNum);\n  //     --pageActiveIdx;\n  //     displayPage(pageActiveIdx);\n  //   });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pagination\",\n    children: [/*#__PURE__*/_jsxDEV(BsArrowLeftSquareFill, {\n      className: \"arrow-left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"pageItems\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BsArrowRightSquareFill, {\n      className: \"arrow-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_c = Pagination;\nvar _c;\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"names":["BsArrowLeftSquareFill","BsArrowRightSquareFill","agoraStatesDiscussions","Pagination","rowsPerPage","rows","document","querySelectorAll","rowsCount","length","pageCount","Math","ceil","pageSection","querySelector","prePageBtn","nextPageBtn","pageActiveIdx","currentPageNum","maxPageNum","i","pageList","createElement","pageLisElem","setAttribute","textContent","append","appendChild"],"sources":["/Users/minhyunglee/Desktop/CodeStates/agora-states-react/src/Components/Pagination.js"],"sourcesContent":["import { BsArrowLeftSquareFill } from \"react-icons/bs\";\nimport { BsArrowRightSquareFill } from \"react-icons/bs\";\nimport { agoraStatesDiscussions } from \"../data\";\n\nexport default function Pagination() {\n  //   // 페이지네이션\n  const rowsPerPage = 10; // 한 페이지에 들어가는 요소 수\n  const rows = document.querySelectorAll(\"ul li\");\n  const rowsCount = agoraStatesDiscussions.length; // newDiscussions로 수정 필요\n\n  const pageCount = Math.ceil(rowsCount / rowsPerPage);\n  const pageSection = document.querySelector(\".pageItems\");\n  //   // 화살표 추가\n  const prePageBtn = document.querySelector(\".arrow-left\");\n  const nextPageBtn = document.querySelector(\".arrow-right\");\n  let pageActiveIdx = 0; // 현재 페이지 그룹\n  let currentPageNum = 0; // 현재 보고 있는 페이지네이션 번호\n  let maxPageNum = 5; // 페이지 그룹 내 페이지 최대 개수\n\n  for (let i = 1; i < rowsCount / rowsPerPage + 1; i++) {\n    const pageList = document.createElement(\"li\");\n    const pageLisElem = document.createElement(\"a\");\n    pageLisElem.setAttribute(\"href\", \"#\");\n    pageLisElem.textContent = `${i}`;\n    pageList.append(pageLisElem);\n    pageSection.appendChild(pageList);\n  }\n\n  //   const numberBtn = pageSection.querySelectorAll(\"a\");\n  //   numberBtn.forEach((item, idx) => {\n  //     item.addEventListener(\"click\", (event) => {\n  //       event.preventDefault();\n  //       for (let num of numberBtn) {\n  //         num.classList.remove(\"active\");\n  //       }\n  //       event.target.classList.add(\"active\");\n  //       display(idx);\n  //     });\n  //   });\n\n  //   // 페이지 버튼 구현\n  //   function display(idx) {\n  //     // idx 0 -> slice(0, 5);   0에서 5까지 요소\n  //     // idx 1 -> slice(1, 10);   1에서 10까지 요소\n\n  //     let start = idx * rowsPerPage; // 시작 페이지\n  //     let end = start + rowsPerPage; // 마지막 페이지\n  //     let rowsArray = [...rows]; // 유사 배열이므로 배열로 변환\n  //     console.log(rowsArray);\n  //     for (let row of rowsArray) {\n  //       row.style.display = \"none\"; // 처음에 화면에 요소를 모두 안보이게 처리\n  //     }\n\n  //     let newRows = rowsArray.slice(start, end);\n  //     for (let num of newRows) {\n  //       num.style.display = \"\"; // 새로 만들어준 배열을 보이게 처리\n  //     }\n  //   }\n  //   display(0);\n\n  //   // 페이지 버튼 그룹 구현\n  //   // 숫자를 받아서 그룹을 보여줌\n  //   // num = 0 -> slice(0,5)\n  //   // num = 1 -> slice(0,10)\n  //   function displayPage(num) {\n  //     // 페이지 번보 안보이게 처리\n  //     for (let nu of numberBtn) {\n  //       nu.style.display = \"none\";\n  //     }\n  //     let totalPageCount = Math.ceil(pageCount / maxPageNum);\n  //     let pageArr = [...numberBtn];\n  //     let start = num * maxPageNum;\n  //     console.log(num);\n  //     console.log(maxPageNum);\n\n  //     let end = start + maxPageNum;\n  //     let pageListArr = pageArr.slice(start, end);\n\n  //     for (let item of pageListArr) {\n  //       item.style.display = \"block\";\n  //     }\n  //     if (pageActiveIdx === 0) {\n  //       prePageBtn.style.display = \"none\";\n  //     } else {\n  //       prePageBtn.style.display = \"block\";\n  //     }\n\n  //     if (pageActiveIdx === totalPageCount - 1) {\n  //       nextPageBtn.style.display = \"none\";\n  //     } else {\n  //       nextPageBtn.style.display = \"block\";\n  //     }\n  //   }\n\n  //   displayPage(0);\n\n  //   nextPageBtn.addEventListener(\"click\", () => {\n  //     let nextPageNum = pageActiveIdx * maxPageNum + maxPageNum;\n  //     display(nextPageNum);\n  //     ++pageActiveIdx;\n  //     displayPage(pageActiveIdx);\n  //   });\n\n  //   prePageBtn.addEventListener(\"click\", () => {\n  //     let prePageNum = pageActiveIdx * maxPageNum - maxPageNum;\n  //     display(prePageNum);\n  //     --pageActiveIdx;\n  //     displayPage(pageActiveIdx);\n  //   });\n\n  return (\n    <div className=\"pagination\">\n      <BsArrowLeftSquareFill className=\"arrow-left\"></BsArrowLeftSquareFill>\n      <ul className=\"pageItems\"></ul>\n      <BsArrowRightSquareFill className=\"arrow-right\"></BsArrowRightSquareFill>\n    </div>\n  );\n}\n"],"mappings":";AAAA,SAASA,qBAAqB,QAAQ,gBAAgB;AACtD,SAASC,sBAAsB,QAAQ,gBAAgB;AACvD,SAASC,sBAAsB,QAAQ,SAAS;AAAC;AAEjD,eAAe,SAASC,UAAU,GAAG;EACnC;EACA,MAAMC,WAAW,GAAG,EAAE,CAAC,CAAC;EACxB,MAAMC,IAAI,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,OAAO,CAAC;EAC/C,MAAMC,SAAS,GAAGN,sBAAsB,CAACO,MAAM,CAAC,CAAC;;EAEjD,MAAMC,SAAS,GAAGC,IAAI,CAACC,IAAI,CAACJ,SAAS,GAAGJ,WAAW,CAAC;EACpD,MAAMS,WAAW,GAAGP,QAAQ,CAACQ,aAAa,CAAC,YAAY,CAAC;EACxD;EACA,MAAMC,UAAU,GAAGT,QAAQ,CAACQ,aAAa,CAAC,aAAa,CAAC;EACxD,MAAME,WAAW,GAAGV,QAAQ,CAACQ,aAAa,CAAC,cAAc,CAAC;EAC1D,IAAIG,aAAa,GAAG,CAAC,CAAC,CAAC;EACvB,IAAIC,cAAc,GAAG,CAAC,CAAC,CAAC;EACxB,IAAIC,UAAU,GAAG,CAAC,CAAC,CAAC;;EAEpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,SAAS,GAAGJ,WAAW,GAAG,CAAC,EAAEgB,CAAC,EAAE,EAAE;IACpD,MAAMC,QAAQ,GAAGf,QAAQ,CAACgB,aAAa,CAAC,IAAI,CAAC;IAC7C,MAAMC,WAAW,GAAGjB,QAAQ,CAACgB,aAAa,CAAC,GAAG,CAAC;IAC/CC,WAAW,CAACC,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC;IACrCD,WAAW,CAACE,WAAW,GAAI,GAAEL,CAAE,EAAC;IAChCC,QAAQ,CAACK,MAAM,CAACH,WAAW,CAAC;IAC5BV,WAAW,CAACc,WAAW,CAACN,QAAQ,CAAC;EACnC;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACE;IAAK,SAAS,EAAC,YAAY;IAAA,wBACzB,QAAC,qBAAqB;MAAC,SAAS,EAAC;IAAY;MAAA;MAAA;MAAA;IAAA,QAAyB,eACtE;MAAI,SAAS,EAAC;IAAW;MAAA;MAAA;MAAA;IAAA,QAAM,eAC/B,QAAC,sBAAsB;MAAC,SAAS,EAAC;IAAa;MAAA;MAAA;MAAA;IAAA,QAA0B;EAAA;IAAA;IAAA;IAAA;EAAA,QACrE;AAEV;AAAC,KAjHuBlB,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}