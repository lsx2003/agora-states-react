{"ast":null,"code":"var _jsxFileName = \"/Users/minhyunglee/Desktop/CodeStates/agora-states-react/src/Components/Pagination.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { BsArrowLeftSquareFill } from \"react-icons/bs\";\nimport { BsArrowRightSquareFill } from \"react-icons/bs\";\nimport { agoraStatesDiscussions } from \"../data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pagination() {\n  _s();\n  useEffect(() => {}, []);\n  // 페이지네이션\n  const rowsPerPage = 10; // 한 페이지에 들어가는 요소 수\n  const rows = document.querySelectorAll(\"ul li\");\n  const rowsCount = agoraStatesDiscussions.length; // newDiscussions로 수정 필요\n\n  const pageCount = Math.ceil(rowsCount / rowsPerPage);\n  const pageSection = document.querySelector(\".pageItems\");\n  // 화살표 추가\n  const prePageBtn = document.querySelector(\".arrow-left\");\n  const nextPageBtn = document.querySelector(\".arrow-right\");\n  let pageActiveIdx = 0; // 현재 페이지 그룹\n  let currentPageNum = 0; // 현재 보고 있는 페이지네이션 번호\n  let maxPageNum = 5; // 페이지 그룹 내 페이지 최대 개수\n\n  // for (let i = 1; i < rowsCount / rowsPerPage + 1; i++) {\n  //   const pageList = document.createElement(\"li\");\n  //   const pageLisElem = document.createElement(\"a\");\n  //   pageLisElem.setAttribute(\"href\", \"#\");\n  //   pageLisElem.textContent = `${i}`;\n  //   pageList.append(pageLisElem);\n  //   pageSection.appendChild(pageList);\n  // }\n\n  // const numberBtn = pageSection.querySelectorAll(\"a\");\n  // numberBtn.forEach((item, idx) => {\n  //   item.addEventListener(\"click\", (event) => {\n  //     event.preventDefault();\n  //     for (let num of numberBtn) {\n  //       num.classList.remove(\"active\");\n  //     }\n  //     event.target.classList.add(\"active\");\n  //     display(idx);\n  //   });\n  // });\n\n  // // 페이지 버튼 구현\n  // function display(idx) {\n  //   // idx 0 -> slice(0, 5);   0에서 5까지 요소\n  //   // idx 1 -> slice(1, 10);   1에서 10까지 요소\n\n  //   let start = idx * rowsPerPage; // 시작 페이지\n  //   let end = start + rowsPerPage; // 마지막 페이지\n  //   let rowsArray = [...rows]; // 유사 배열이므로 배열로 변환\n  //   console.log(rowsArray);\n  //   for (let row of rowsArray) {\n  //     row.style.display = \"none\"; // 처음에 화면에 요소를 모두 안보이게 처리\n  //   }\n\n  //   let newRows = rowsArray.slice(start, end);\n  //   for (let num of newRows) {\n  //     num.style.display = \"\"; // 새로 만들어준 배열을 보이게 처리\n  //   }\n  // }\n  // display(0);\n\n  // 페이지 버튼 그룹 구현\n  // 숫자를 받아서 그룹을 보여줌\n  // num = 0 -> slice(0,5)\n  // num = 1 -> slice(0,10)\n  function displayPage(num) {\n    // 페이지 번보 안보이게 처리\n    for (let nu of numberBtn) {\n      nu.style.display = \"none\";\n    }\n    let totalPageCount = Math.ceil(pageCount / maxPageNum);\n    let pageArr = [...numberBtn];\n    let start = num * maxPageNum;\n    console.log(num);\n    console.log(maxPageNum);\n    let end = start + maxPageNum;\n    let pageListArr = pageArr.slice(start, end);\n    for (let item of pageListArr) {\n      item.style.display = \"block\";\n    }\n    if (pageActiveIdx === 0) {\n      prePageBtn.style.display = \"none\";\n    } else {\n      prePageBtn.style.display = \"block\";\n    }\n    if (pageActiveIdx === totalPageCount - 1) {\n      nextPageBtn.style.display = \"none\";\n    } else {\n      nextPageBtn.style.display = \"block\";\n    }\n  }\n\n  // displayPage(0);\n\n  nextPageBtn.addEventListener(\"click\", () => {\n    let nextPageNum = pageActiveIdx * maxPageNum + maxPageNum;\n    display(nextPageNum);\n    ++pageActiveIdx;\n    displayPage(pageActiveIdx);\n  });\n  prePageBtn.addEventListener(\"click\", () => {\n    let prePageNum = pageActiveIdx * maxPageNum - maxPageNum;\n    display(prePageNum);\n    --pageActiveIdx;\n    displayPage(pageActiveIdx);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pagination\",\n    children: [/*#__PURE__*/_jsxDEV(BsArrowLeftSquareFill, {\n      className: \"arrow-left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"pageItems\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BsArrowRightSquareFill, {\n      className: \"arrow-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n_s(Pagination, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Pagination;\nvar _c;\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"names":["useEffect","BsArrowLeftSquareFill","BsArrowRightSquareFill","agoraStatesDiscussions","Pagination","rowsPerPage","rows","document","querySelectorAll","rowsCount","length","pageCount","Math","ceil","pageSection","querySelector","prePageBtn","nextPageBtn","pageActiveIdx","currentPageNum","maxPageNum","displayPage","num","nu","numberBtn","style","display","totalPageCount","pageArr","start","console","log","end","pageListArr","slice","item","addEventListener","nextPageNum","prePageNum"],"sources":["/Users/minhyunglee/Desktop/CodeStates/agora-states-react/src/Components/Pagination.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { BsArrowLeftSquareFill } from \"react-icons/bs\";\nimport { BsArrowRightSquareFill } from \"react-icons/bs\";\nimport { agoraStatesDiscussions } from \"../data\";\n\nexport default function Pagination() {\n  useEffect(() => {}, []);\n  // 페이지네이션\n  const rowsPerPage = 10; // 한 페이지에 들어가는 요소 수\n  const rows = document.querySelectorAll(\"ul li\");\n  const rowsCount = agoraStatesDiscussions.length; // newDiscussions로 수정 필요\n\n  const pageCount = Math.ceil(rowsCount / rowsPerPage);\n  const pageSection = document.querySelector(\".pageItems\");\n  // 화살표 추가\n  const prePageBtn = document.querySelector(\".arrow-left\");\n  const nextPageBtn = document.querySelector(\".arrow-right\");\n  let pageActiveIdx = 0; // 현재 페이지 그룹\n  let currentPageNum = 0; // 현재 보고 있는 페이지네이션 번호\n  let maxPageNum = 5; // 페이지 그룹 내 페이지 최대 개수\n\n  // for (let i = 1; i < rowsCount / rowsPerPage + 1; i++) {\n  //   const pageList = document.createElement(\"li\");\n  //   const pageLisElem = document.createElement(\"a\");\n  //   pageLisElem.setAttribute(\"href\", \"#\");\n  //   pageLisElem.textContent = `${i}`;\n  //   pageList.append(pageLisElem);\n  //   pageSection.appendChild(pageList);\n  // }\n\n  // const numberBtn = pageSection.querySelectorAll(\"a\");\n  // numberBtn.forEach((item, idx) => {\n  //   item.addEventListener(\"click\", (event) => {\n  //     event.preventDefault();\n  //     for (let num of numberBtn) {\n  //       num.classList.remove(\"active\");\n  //     }\n  //     event.target.classList.add(\"active\");\n  //     display(idx);\n  //   });\n  // });\n\n  // // 페이지 버튼 구현\n  // function display(idx) {\n  //   // idx 0 -> slice(0, 5);   0에서 5까지 요소\n  //   // idx 1 -> slice(1, 10);   1에서 10까지 요소\n\n  //   let start = idx * rowsPerPage; // 시작 페이지\n  //   let end = start + rowsPerPage; // 마지막 페이지\n  //   let rowsArray = [...rows]; // 유사 배열이므로 배열로 변환\n  //   console.log(rowsArray);\n  //   for (let row of rowsArray) {\n  //     row.style.display = \"none\"; // 처음에 화면에 요소를 모두 안보이게 처리\n  //   }\n\n  //   let newRows = rowsArray.slice(start, end);\n  //   for (let num of newRows) {\n  //     num.style.display = \"\"; // 새로 만들어준 배열을 보이게 처리\n  //   }\n  // }\n  // display(0);\n\n  // 페이지 버튼 그룹 구현\n  // 숫자를 받아서 그룹을 보여줌\n  // num = 0 -> slice(0,5)\n  // num = 1 -> slice(0,10)\n  function displayPage(num) {\n    // 페이지 번보 안보이게 처리\n    for (let nu of numberBtn) {\n      nu.style.display = \"none\";\n    }\n    let totalPageCount = Math.ceil(pageCount / maxPageNum);\n    let pageArr = [...numberBtn];\n    let start = num * maxPageNum;\n    console.log(num);\n    console.log(maxPageNum);\n\n    let end = start + maxPageNum;\n    let pageListArr = pageArr.slice(start, end);\n\n    for (let item of pageListArr) {\n      item.style.display = \"block\";\n    }\n    if (pageActiveIdx === 0) {\n      prePageBtn.style.display = \"none\";\n    } else {\n      prePageBtn.style.display = \"block\";\n    }\n\n    if (pageActiveIdx === totalPageCount - 1) {\n      nextPageBtn.style.display = \"none\";\n    } else {\n      nextPageBtn.style.display = \"block\";\n    }\n  }\n\n  // displayPage(0);\n\n  nextPageBtn.addEventListener(\"click\", () => {\n    let nextPageNum = pageActiveIdx * maxPageNum + maxPageNum;\n    display(nextPageNum);\n    ++pageActiveIdx;\n    displayPage(pageActiveIdx);\n  });\n\n  prePageBtn.addEventListener(\"click\", () => {\n    let prePageNum = pageActiveIdx * maxPageNum - maxPageNum;\n    display(prePageNum);\n    --pageActiveIdx;\n    displayPage(pageActiveIdx);\n  });\n\n  return (\n    <div className=\"pagination\">\n      <BsArrowLeftSquareFill className=\"arrow-left\"></BsArrowLeftSquareFill>\n      <ul className=\"pageItems\"></ul>\n      <BsArrowRightSquareFill className=\"arrow-right\"></BsArrowRightSquareFill>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}